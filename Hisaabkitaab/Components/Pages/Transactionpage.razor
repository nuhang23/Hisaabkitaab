@page "/transactions"
@using MudBlazor
@using Hisaabkitaab.Components.Model
@using Hisaabkitaab.Components.Services

<MudAppBar Color="Color.Dark" Fixed="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
    <MudSpacer />
</MudAppBar>

<MudDrawer @bind-Open="drawerOpen" Anchor="Anchor.Left" Color="Color.Dark" Elevation="0">
    <MudNavMenu>
        <MudNavLink Href="/dashboard" Match="NavLinkMatch.All">Dashboard</MudNavLink>
        <MudNavLink Href="/account" Match="NavLinkMatch.Prefix">Account</MudNavLink>
        <MudNavLink Href="/transactions" Match="NavLinkMatch.Prefix">Transaction</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4 mx-auto mt-10">
    <!-- Search Bar and Filter Section -->
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudTextField @bind-Value="SearchQuery" Label="Search Transactions" Variant="Variant.Filled" FullWidth Class="mb-4"
                          Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack AlignItems="AlignItems.Center" Style="width:650px; height:450px">
                <!-- Set the PickerVariant to Dialog directly -->
                <MudDateRangePicker PickerVariant="PickerVariant.Dialog" @bind-DateRange="@_dateRange" Margin="Margin.Dense" />
            </MudStack>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudButton Variant="Variant.Filled" Color="Color.Dark" FullWidth OnClick="ApplyFilters" Class="mt-4">
                Filter
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6" md="2">
            <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Primary" OnClick="SearchTransactions" Class="mt-4" />
        </MudItem>
    </MudGrid>

    <!-- Display Search Results -->
    @if (filteredTransactionsList.Any())
    {
        <MudGrid>
            <MudItem xs="12">
                <MudTable Items="filteredTransactionsList" Hover="true" Bordered="true">
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Note</MudTh>
                        <MudTh>Created At</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">@context.Title</MudTd>
                        <MudTd DataLabel="Amount">@context.Amount</MudTd>
                        <MudTd DataLabel="Note">@context.Note</MudTd>
                        <MudTd DataLabel="Created At">@context.CreatedAt.ToString("MM/dd/yyyy")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    }
    else if (!string.IsNullOrEmpty(SearchQuery))
    {
        <MudText>No results found for "@SearchQuery".</MudText>
    }

    <!-- Transaction Cards and Tables -->
    <MudGrid>
        <!-- Income Card -->
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Income Transactions</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="incomeTransactions" Hover="true" Bordered="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                            <MudTh>Note</MudTh>
                            <MudTh>Created At</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@context.Amount</MudTd>
                            <MudTd DataLabel="Note">@context.Note</MudTd>
                            <MudTd DataLabel="Created At">@context.CreatedAt.ToString("MM/dd/yyyy")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Expense Card -->
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Expense Transactions</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="expenseTransactions" Hover="true" Bordered="true">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Amount</MudTh>
                            <MudTh>Note</MudTh>
                            <MudTh>Created At</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Amount">@context.Amount</MudTd>
                            <MudTd DataLabel="Note">@context.Note</MudTd>
                            <MudTd DataLabel="Created At">@context.CreatedAt.ToString("MM/dd/yyyy")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudGrid>
    <MudItem xs="12" class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="ToggleFormVisibility" Style="background-color: black; color: white; width: 200px; margin: 0 auto; display: block;">
            Add Transaction
        </MudButton>
    </MudItem>
</MudGrid>

@if (isFormVisible)
{
    <MudGrid class="mt-4">
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Add New Transaction</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField @bind-Value="Title" Label="Title" Variant="Variant.Filled" FullWidth />
                    <MudSelect @bind-Value="TransactionType" Label="Transaction Type" Variant="Variant.Filled" FullWidth class="mt-3">
                        <MudSelectItem Value="Income">Income</MudSelectItem>
                        <MudSelectItem Value="Expense">Expense</MudSelectItem>
                    </MudSelect>
                    <MudTextField @bind-Value="Amount" Label="Amount" Variant="Variant.Filled" FullWidth class="mt-3" />
                    <MudTextField @bind-Value="Note" Label="Note (Optional)" Variant="Variant.Filled" FullWidth class="mt-3" />
                    <MudTextField @bind-Value="TagInput" Label="Enter or Select Tag" Variant="Variant.Filled" FullWidth class="mt-3" />
                    <MudSelect T="Tag" @bind-Value="SelectedTag" Label="Select Existing Tag" FullWidth class="mt-3">
                        @foreach (var tag in allTags)
                        {
                            <MudSelectItem T="Tag" Value="tag">@tag.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="SubmitTransaction" Variant="Variant.Filled" Color="Color.Primary" Style="background-color: black; color: white;">Submit</MudButton>
                    <MudButton OnClick="CancelForm" Variant="Variant.Text">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}


@code {
    private string Income = "Income";
    private string Expense = "Expense";
    private string Title { get; set; }
    private string TransactionType { get; set; }
    private double Amount { get; set; }
    private string Note { get; set; }
    private string TagInput { get; set; }
    private Tag SelectedTag { get; set; }
    private string SearchQuery { get; set; } = string.Empty;
    private bool isFormVisible = false;
    private bool drawerOpen = false;

    // Date Range Picker variables
    private PickerVariant _variant = PickerVariant.Dialog;  // Set default variant to Dialog
    private DateRange _dateRange { get; set; }

    private List<Transactions> incomeTransactions = new List<Transactions>();
    private List<Transactions> expenseTransactions = new List<Transactions>();
    private List<Tag> allTags = new List<Tag>();
    private List<Transactions> filteredTransactionsList = new List<Transactions>();

    [Inject] private DatabaseServices DbService { get; set; }

    // Method to apply filters and search transactions by Date, Title, Type, and Tag
    private async Task ApplyFilters()
    {
        // Fetch all transactions to begin filtering
        filteredTransactionsList = await DbService.GetTransactionsAsync();

        // Filter by Date Range (if available)
        if (_dateRange != null && _dateRange.Start != null && _dateRange.End != null)
        {
            filteredTransactionsList = filteredTransactionsList
                .Where(t => t.CreatedAt >= _dateRange.Start.Value && t.CreatedAt <= _dateRange.End.Value)
                .ToList();
        }

        // Filter by Transaction Type (Income/Expense)
        if (!string.IsNullOrEmpty(TransactionType))
        {
            filteredTransactionsList = filteredTransactionsList
                .Where(t => t.TransactionType == TransactionType)
                .ToList();
        }

        // Filter by Title (based on the search query)
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            filteredTransactionsList = filteredTransactionsList
                .Where(t => t.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Filter by Tag (if a tag is selected)
        if (SelectedTag != null)
        {
            // Assuming DbService.GetTransactionsByTagIdAsync returns a list of transaction IDs associated with a tag
            var tagTransactionIds = await DbService.GetTransactionsByTagIdAsync(SelectedTag.Id);

            filteredTransactionsList = filteredTransactionsList
                .Where(t => tagTransactionIds.Contains(t.Id))
                .ToList();
        }
    }

    // Method to search transactions based on title or tag
    private async Task SearchTransactions()
    {
        filteredTransactionsList = await DbService.SearchTransactionsAsync(SearchQuery);
    }

    // Submit new transaction to the database
    private async Task SubmitTransaction()
    {
        // Validate input fields
        if (string.IsNullOrEmpty(Title) || Amount == 0 || string.IsNullOrEmpty(TransactionType))
        {
            return; // Stop the method if the essential fields are missing
        }

        // Create new transaction
        var newTransaction = new Transactions
            {
                Title = Title,
                Amount = Amount,
                TransactionType = TransactionType,
                Note = Note,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now
            };

        // Save the transaction to the database
        await DbService.CreateTransaction(newTransaction);

        // Handle the tag input or selected tag
        Tag tagToLink = null;

        if (!string.IsNullOrEmpty(TagInput))
        {
            var existingTag = await DbService.GetTagByNameAsync(TagInput);

            if (existingTag == null)
            {
                // If the tag doesn't exist, create a new one
                var newTag = new Tag { Name = TagInput, CreatedAt = DateTime.Now };
                await DbService.CreateTagAsync(newTag);
                tagToLink = newTag;
            }
            else
            {
                tagToLink = existingTag;
            }
        }
        else if (SelectedTag != null)
        {
            tagToLink = SelectedTag;
        }

        if (tagToLink != null)
        {
            // Link the transaction with the tag
            await DbService.LinkTransactionWithTag(newTransaction.Id, tagToLink.Id);
        }

        // Refresh the transactions list for Income and Expense types
        incomeTransactions = await DbService.GetTransactionsByTypeAsync(Income);
        expenseTransactions = await DbService.GetTransactionsByTypeAsync(Expense);
    }

    private void ToggleFormVisibility()
    {
        isFormVisible = !isFormVisible;  // Toggle the visibility
    }

    // Method to reset the form and hide it
    private void CancelForm()
    {
        isFormVisible = false;  // Hide the form when canceled
    }

    // Update PickerVariant on toggle change
    private void OnValueChanged(PickerVariant variant)
    {
        _dateRange = null; // Reset the date range when changing the picker variant
        _variant = variant;
    }

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
}
