@page "/dashboard"
@using Hisaabkitaab.Components.Model;
@using Hisaabkitaab.Components.Services;

<h3>Dashboard</h3>

<MudAppBar Color="Color.Dark" Fixed="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
    <MudSpacer />
</MudAppBar>
<MudDrawer @bind-Open="drawerOpen" Anchor="Anchor.Left" Color="Color.Dark" Elevation="4">
    <MudNavMenu>
        <MudNavLink Href="/dashboard" Match="NavLinkMatch.All">Dashboard</MudNavLink>
        <MudNavLink Href="/account" Match="NavLinkMatch.Prefix">Account</MudNavLink>
        <MudNavLink Href="/transactions" Match="NavLinkMatch.Prefix">Transaction</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<MudGrid>
    <!-- Balance Card -->
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Balance</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">Rs 50,000</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Expense Card -->
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Expense</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">Rs 10,000</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Debt Card -->
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Debt</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">Rs 10,000</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudGrid>
    <!-- Highest Transaction Card -->
    <MudItem xs="12" class="mb-4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Highest Transaction</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (highestTransaction != null)
                {
                    <MudText Typo="Typo.body1">Title: @highestTransaction.Title</MudText>
                    <MudText Typo="Typo.body1">Amount: Rs @highestTransaction.Amount</MudText>
                    <MudText Typo="Typo.body1">Date: @highestTransaction.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">No transactions available</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Lowest Transaction Card -->
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Lowest Transaction</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (lowestTransaction != null)
                {
                    <MudText Typo="Typo.body1">Title: @lowestTransaction.Title</MudText>
                    <MudText Typo="Typo.body1">Amount: Rs @lowestTransaction.Amount</MudText>
                    <MudText Typo="Typo.body1">Date: @lowestTransaction.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">No transactions available</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>



@code {
    private bool drawerOpen = false;
    

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }

    private List<Transactions> transactions = new List<Transactions>();
    private Transactions highestTransaction = null;
    private Transactions lowestTransaction = null;

    [Inject] private DatabaseServices DbService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userId = 1; // Replace with actual userId logic, e.g., from authentication

        // Fetch all transactions for the user
        transactions = await DbService.GetTransactionsAsync();

        // Find the transaction with the highest amount
        if (transactions.Any())
        {
            highestTransaction = transactions.OrderByDescending(t => t.Amount).FirstOrDefault();
        }
        if (transactions.Any())
        {
            lowestTransaction = transactions.OrderBy(t => t.Amount).FirstOrDefault();
        }


    }


}
